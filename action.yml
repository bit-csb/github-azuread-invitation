name: 'Terraform flow'

description: 'Perform terraform flow in given directory'

inputs:
  map-file:
    description: 'the path of the file containing the map'
    required: true
  map-name:
    description: 'the name of the map'
    required: true
  users-property:
    description: 'the name of the users property within the map'
    required: true


runs:
  using: "composite"
  steps: 
    - name: Checkout
      uses: actions/checkout@v2

    - name: Copy map file
      shell: bash
      run: |
        mkdir -p ./tf_invitation
        cp ${{ inputs.map-file }} ./tf_invitation/
    
    - name: Wirte terraform.tf
      shell: bash
      run: |
        cat > terraform.tf <<EOL
        terraform {
          required_version = "~>1.1.2"

          backend "azurerm" {}

          required_providers {
            azuread = {
              source  = "hashicorp/azuread"
              version = "~>2.15.0"
            }
          }
        }

        provider "azuread" {
        }

        locals {
          users = toset(flatten([for value in local.${{ inputs.map-name }} : value.${{ inputs.users-property }}]))
        }
  
        module "invite_users" {
          source = "git@github-bit-csb:bit-csb/terraform-azuread-invitation?ref=0.1.0"

          users = local.users
        }

        output "users" {
          value = local.users
        }
        EOL

        cat terraform.tf
      working-directory: "./tf_invitation"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      id: init
      shell: bash
      run: terraform init 
      working-directory: "./tf_invitation"

    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: "./tf_invitation"

    - name: Terraform Plan
      id: plan
      shell: bash    
      run: terraform plan -no-color ${{ steps.parameters.outputs.varFile }}
      working-directory: "./tf_invitation"
  
    - name: Failed plan
      if: ${{ failure() }}
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      id: failed-plan
      shell: bash
      run: |
        # const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
        #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        <details><summary>Show Plan</summary>
        \`\`\`\
        ${process.env.PLAN}
        \`\`\`
        </details>        

    - name: Terraform Apply
      id: apply
      shell: bash    
      run: terraform apply -auto-approve ${{ steps.parameters.outputs.varFile }}
      working-directory: "./tf_invitation"
