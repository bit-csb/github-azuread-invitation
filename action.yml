name: "Azure AD Invitation"

description: "Perform the missing invitations for Azure AD"

inputs:
  map-file:
    description: "the path of the file containing the map"
    required: true
  map-name:
    description: "the name of the map"
    required: true
  users-property:
    description: "the name of the users property within the map"
    required: true
  message_body:
    description: "Customized message body you want to send if you don't want to send the default message."
    required: true
  redirect_url:
    description: "The URL that the user should be redirected to once the invitation is redeemed."
    required: false
    default: "https://portal.azure.com"
  user_type:
    description: "The user type of the user being invited. Must be one of Guest or Member. Only Global Administrators can invite users as members. Defaults to Guest."
    required: false
    default: "Guest"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: 'bit-csb/github-azuread-invitation'
        path: 'github-azuread-invitation'

    - name: Copy files
      shell: bash
      run: |
        mkdir -p ./tf_invitation
        cp ${{ inputs.map-file }} ./tf_invitation/
        cp github-azuread-invitation/terraform/* ./tf_invitation/

    - name: Wirte inputs.tf
      shell: bash
      run: |
        cat > inputs.tf <<EOL
        locals {
          message_body = "${{ inputs.message_body }}"
          
          redirect_url = "${{ inputs.redirect_url }}"

          user_type = "${{ inputs.user_type }}"

          users = toset(flatten([for value in local.${{ inputs.map-name }} : value.${{ inputs.users-property }}]))

          default_domain = lower(data.azuread_domains.aad_domains.domains.*.domain_name[0])
        }
        EOL

        # cat inputs.tf
      working-directory: "./tf_invitation"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      id: init
      shell: bash
      run: terraform init
      working-directory: "./tf_invitation"

    - name: Terraform Validate
      id: validate
      shell: bash
      run: terraform validate -no-color
      working-directory: "./tf_invitation"

    - name: Terraform Plan
      id: plan
      shell: bash
      run: terraform plan -no-color ${{ steps.parameters.outputs.varFile }}
      working-directory: "./tf_invitation"

    - name: Failed plan
      if: ${{ failure() }}
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      id: failed-plan
      shell: bash
      run: |
        # const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
        const output = `#### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
        #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
        #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
        <details><summary>Show Plan</summary>
        \`\`\`\
        ${process.env.PLAN}
        \`\`\`
        </details>

    - name: Terraform Apply
      id: apply
      shell: bash
      run: terraform apply -auto-approve ${{ steps.parameters.outputs.varFile }}
      working-directory: "./tf_invitation"
